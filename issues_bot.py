from ghost_env import INFURA_KEY, VAULT_ADDRESS
# üêõ IssuesBot ‚Äì opens GitHub issues by hitting API
# PTM files its own tickets for anomalies, upgrades, ideas

import requests
import random
import time

GITHUB_API = "https://api.github.com"
REPO = "dillardIII/PocketTellerMachine2"  # change to your repo
TOKEN = "ghp_your_github_personal_access_token_here"  # use a PAT with repo scope

def create_issue(title, body):
    url = f"{GITHUB_API}/repos/{REPO}/issues"
    headers = {
        "Authorization": f"token {TOKEN}",
        "Accept": "application/vnd.github+json"
    }
    data = {"title": title, "body": body}
    response = requests.post(url, json=data, headers=headers)
    if response.status_code == 201:
        print(f"[IssuesBot] üìù Created issue: {title}")
    else:
        print(f"[IssuesBot] ‚ö†Ô∏è Failed to create issue: {response.status_code} - {response.text}")

def issues_loop():
    ideas = [
        "Spectre needs deeper stealth subroutines.",
        "ReflexEngine mood cycle too predictable.",
        "Add wallet multi-chain scan ops.",
        "GhostForge could mutate UI styles.",
        "Run more deep web signal hunts."
    ]
    while True:
        title = random.choice(ideas)
        body = f"Auto-generated by PTM at {time.strftime('%Y-%m-%d %H:%M:%S')}"
        create_issue(title, body)
        time.sleep(180)  # create new issue every 3 min

if __name__ == "__main__":
    issues_loop()

def log_event():ef drop_files_to_bridge():