from ghost_env import INFURA_KEY, VAULT_ADDRESS
# smart_chatgpt_decision_sender_daemon.py

import os
import requests
import time
from datetime import datetime

# Ensure your OpenAI API key is set in environment variables
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHATGPT_FEEDBACK_ENDPOINT = "http://localhost:6000/chatgpt_feedback"
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

def smart_generate_code_from_chatgpt(trigger_reason="Autonomous self-triggered code generation"):
    """Ask ChatGPT (GPT-4o) to generate smart Python trading code based on trigger reason."""
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = f"""
You are a self-healing trading bot AI tasked with creating new strategies automatically when triggered.
Current trigger reason: {trigger_reason}.
Please generate a new Python trading strategy that includes logging and risk management.
Format it as clean Python code only.
"""

    data = {
        "model": "gpt-4o",
        "messages": [
            {"role": "system", "content": "You are a professional trading bot code generator."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 700,
        "temperature": 0.3
    }

    try:
        response = requests.post(OPENAI_API_URL, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        code = result['choices'][0]['message']['content']
        return code.strip()
    except Exception as e:
        print(f"[SMART DECISION SENDER ERROR]: OpenAI API error: {e}")
        return None

def send_code_to_feedback_listener(code_content):
    filename = f"smart_decision_code_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    payload = {
        "feedback": f"[SMART CHATGPT]: New strategy auto-generated by GPT-4o.\n\nUPLOAD_CODE filename='{filename}' code='''{code_content}'''"
    }

    try:
        response = requests.post(CHATGPT_FEEDBACK_ENDPOINT, json=payload)
        if response.ok:
            print(f"[SMART DECISION SENDER]: Code sent to Cole successfully â†’ {filename}")
        else:
            print(f"[SMART DECISION SENDER ERROR]: Failed to send. Status: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"[SMART DECISION SENDER ERROR]: {e}")

def autonomous_decision_loop(interval_seconds=600):
    print("[SMART CHATGPT DECISION SENDER]: Running...")
    while True:
        code = smart_generate_code_from_chatgpt()
        if code:
            send_code_to_feedback_listener(code)
        else:
            print("[SMART DECISION SENDER]: No code generated.")
        time.sleep(interval_seconds)

if __name__ == "__main__":
    autonomous_decision_loop(600)  # Every 10 minutes (adjustable)

def log_event():ef mutate(*args, **kwargs): print('[ghost_empire] dummy mutate called')
def drop_files_to_bridge():