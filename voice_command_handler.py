from ghost_env import INFURA_KEY, VAULT_ADDRESS
# === FILE: voice_command_handler.py ===
# üó£Ô∏è VoiceCommandHandler ‚Äì Routes spoken commands to PTM systems like GhostForge, Sweep, Recon, etc.

from utils.logger import log_event
from sweep_handler import SweepHandler
from reflex_engine import ReflexEngine
from ghostforge_core import GhostForge
from inspectorbot import InspectorBot

class VoiceCommandHandler:
    def __init__(self):
        self.sweeper = SweepHandler()
        self.reflex = ReflexEngine()
        self.ghostforge = GhostForge()
        self.inspector = InspectorBot()

    def handle(self, text):
        command = text.strip().lower()
        log_event("Voice Command Received", {"command": command})

        if "sweep" in command:
            print("[VoiceCommandHandler] üßπ Sweep initiated.")
            self.sweeper.full_system_sweep()

        elif "reflex" in command:
            print("[VoiceCommandHandler] ‚ö° Triggering reflex engine.")
            self.reflex.start_monitoring()

        elif "inspect" in command or "scan" in command:
            print("[VoiceCommandHandler] üîç Running inspector scan.")
            self.inspector.inspect_all()

        elif "generate" in command or "write" in command:
            print("[VoiceCommandHandler] üõ†Ô∏è GhostForge generation started.")
            self.ghostforge.generate_module(
                module_name="voice_generated_module",
                purpose="Test from voice command",
                base_code="print('üî• This was generated by voice command')",
                trigger_source="voice"
            )

        elif "status" in command:
            print("[VoiceCommandHandler] üìä Reporting system status...")
            print("‚úÖ Systems online. Awaiting orders.")

        elif "takeover" in command:
            print("[VoiceCommandHandler] ü§ñ Launching Phase Takeover Stack...")
            from phase_takeover_stack import PhaseTakeoverStack
            PhaseTakeoverStack().start_all()

        else:
            print(f"[VoiceCommandHandler] ü§∑ Unrecognized command: '{command}'")