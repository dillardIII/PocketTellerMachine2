import os
import json
from datetime import datetime
from pathlib import Path
from assistants.malik import malik_report
import openai

# === Setup ===
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("Missing OPENAI_API_KEY in environment.")

CODE_DIR = "cole_generated_code"
CODE_LOG_FILE = "data/cole_code_log.json"
CODE_WRITES_FILE = "data/cole_code_writes.json"

os.makedirs(CODE_DIR, exist_ok=True)
os.makedirs("data", exist_ok=True)

# === Template Writer ===
def cole_write_code(task_name, description=""):
    print(f"[Cole Writer] Writing template code for task: {task_name}")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{task_name.replace(' ', '_')}_{timestamp}.py"
    file_path = os.path.join(CODE_DIR, filename)

    code = f"""# Auto-generated by Cole
# Task: {task_name}
# Description: {description}
# Timestamp: {timestamp}

def cole_generated_function():
    print("Executing task: {task_name}")
    return "Executed: {task_name}"

if __name__ == "__main__":
    cole_generated_function()
"""

    with open(file_path, "w") as f:
        f.write(code)

    log_code_write(task_name, code)
    malik_report(f"[Template Code] Saved to {file_path}")
    return file_path

# === GPT Code Writer ===
def cole_write_code_gpt(task_description):
    print(f"[Cole GPT Writer] Generating code for task: {task_description}")

    prompt = f"""
You are Cole, an autonomous AI assistant.
Task: {task_description}

Write the required Python code to accomplish this task.
Only return the code.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a Python code generation assistant."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=800
        )

        code = response.choices[0].message["content"].strip()
        if code.startswith("```python"):
            code = code.replace("```python", "").strip()
        if code.endswith("```"):
            code = code[:-3].strip()

        log_code_write(task_description, code)
        return code

    except Exception as e:
        print(f"[GPT Writer] Error: {str(e)}")
        return f"# Error: {str(e)}"

# === Log Writer ===
def log_code_write(task, code):
    entry = {
        "timestamp": datetime.now().isoformat(),
        "task": task,
        "code": code
    }

    logs = []
    if os.path.exists(CODE_WRITES_FILE):
        with open(CODE_WRITES_FILE, "r") as f:
            logs = json.load(f)

    logs.append(entry)
    with open(CODE_WRITES_FILE, "w") as f:
        json.dump(logs[-300:], f, indent=2)

    print(f"[Code Logger] Logged task: {task}")