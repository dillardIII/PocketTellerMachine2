from ghost_env import INFURA_KEY, VAULT_ADDRESS
# === FILE: suggest_next_version.py ===
"""
Strategy Suggestion Engine:
Scans strategy thread logs and proposes a new version of the strategy.
Used for fork generation, auto-ideation, or prompting assistant coders.
"""

import os
import json
from datetime import datetime
from strategy_thread_logger import get_thread_log_path

SUGGESTION_DIR = "data/strategy_suggestions"
os.makedirs(SUGGESTION_DIR, exist_ok=True)

def suggest_next_version(file_name, bot_name="Strategist"):
    path = get_thread_log_path(file_name)

    if not os.path.exists(path):
        print(f"[Strategy Suggestion] ‚ùå No thread log found for {file_name}")
        return None

    with open(path, "r") as f:
        thread = json.load(f)

    history = thread.get("history", [])
    if not history:
        print("[Strategy Suggestion] ‚ö†Ô∏è No history found to base suggestion on.")
        return None

    base_suggestion = generate_summary_suggestion(file_name, history, bot_name)

    # Save suggestion to file
    timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    out_file = f"{bot_name}_{file_name.replace('.py', '')}_SUGGESTED_{timestamp}.txt"
    out_path = os.path.join(SUGGESTION_DIR, out_file)

    with open(out_path, "w") as f:
        f.write(base_suggestion)

    print(f"[üß† Strategy Suggestion] New version idea saved: {out_file}")
    return out_path

def generate_summary_suggestion(file_name, history, bot_name):
    lines = [
        f"# === STRATEGY FORK PROPOSAL: {file_name} ===",
        f"# Generated by: {bot_name}",
        f"# Timestamp: {datetime.utcnow().isoformat()}",
        "",
        "# --- Suggestion based on previous versions ---",
        "",
    ]

    for entry in history[-5:]:  # Look at the most recent 5 entries
        version = entry.get("version", "unknown")
        notes = entry.get("notes", "")
        submitted_by = entry.get("submitted_by", "unknown")
        timestamp = entry.get("timestamp", "unknown")
        lines.append(f"- [{version}] by {submitted_by} at {timestamp}")
        lines.append(f"  ‚Üí {notes}")
        lines.append("")

    # Naive strategy improvement
    lines.append("# --- Proposed changes ---")
    lines.append("- Use adaptive thresholds instead of fixed prices.")
    lines.append("- Add RSI or MACD confirmation on Buy/Sell.")
    lines.append("- Consider trailing stop logic to protect gains.")
    lines.append("")
    lines.append("# === END SUGGESTION ===")

    return "\n".join(lines)

def log_event():ef mutate(*args, **kwargs): print('[ghost_empire] dummy mutate called')
def drop_files_to_bridge():