Sure, here's a simple implementation of a Bollinger Bands alert system using the `pandas` library for data manipulation and `yfinance` to download the stock data. This code will print an alert when the closing price crosses the upper or lower Bollinger Band.

```python
import pandas as pd
import yfinance as yf

def calculate_bollinger_bands(df, window_size=20, num_of_std=2):
    rolling_mean = df['Close'].rolling(window=window_size).mean()
    rolling_std  = df['Close'].rolling(window=window_size).std()
    df['Bollinger High'] = rolling_mean + (rolling_std*num_of_std)
    df['Bollinger Low'] = rolling_mean - (rolling_std*num_of_std)
    return df

def bollinger_bands_alert(symbol):
    df = yf.download(symbol, start='2020-01-01', end='2022-12-31')
    df = calculate_bollinger_bands(df)
    
    for i in range(1, len(df)):
        if df['Close'].iloc[i] > df['Bollinger High'].iloc[i-1]:
            print(f'Alert: {symbol} crossed above the upper Bollinger Band on {df.index[i]}')
        elif df['Close'].iloc[i] < df['Bollinger Low'].iloc[i-1]:
            print(f'Alert: {symbol} crossed below the lower Bollinger Band on {df.index[i]}')

bollinger_bands_alert('AAPL')
```

Please note that this is a basic implementation. The alert system simply prints a message whenever the price crosses a Bollinger Band. You might want to implement more sophisticated alert mechanisms like sending an email or a push notification. Also, you might want to handle cases where the stock data cannot be downloaded or the data is insufficient to calculate the Bollinger Bands.