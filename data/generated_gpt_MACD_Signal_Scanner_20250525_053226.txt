Sure, here is a simple Python code using the `yfinance` and `pandas` libraries to calculate the Moving Average Convergence Divergence (MACD) of a stock and generate a signal when the MACD line crosses the signal line.

```python
import yfinance as yf
import pandas as pd

def calculate_macd(data, short_term, long_term):
    short_ema = data.ewm(span=short_term, adjust=False).mean()
    long_ema = data.ewm(span=long_term, adjust=False).mean()
    macd = short_ema - long_ema
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

def macd_crossover(data):
    macd, signal = calculate_macd(data['Close'], 12, 26)
    data['MACD'] = macd
    data['Signal Line'] = signal
    data['Buy_Signal_Flag'] = (data['MACD'] > data['Signal Line'])
    data['Sell_Signal_Flag'] = (data['MACD'] < data['Signal Line'])
    return data

ticker = 'AAPL'
data = yf.download(ticker, start='2020-01-01', end='2022-12-31')
data = macd_crossover(data)

buy_signals = data[data['Buy_Signal_Flag'] == True]
sell_signals = data[data['Sell_Signal_Flag'] == True]

print("Buy Signals:")
print(buy_signals)
print("\nSell Signals:")
print(sell_signals)
```

This script downloads the historical data for the specified ticker symbol using the `yfinance` library. It then calculates the MACD and signal line, and adds these as new columns to the DataFrame. It also adds two new columns to the DataFrame: `Buy_Signal_Flag` and `Sell_Signal_Flag`, which are True whenever the MACD line crosses above or below the signal line, respectively. Finally, it prints out the dates and prices at which these buy and sell signals occurred.