Sure, here is a simple Python code to calculate Moving Average Convergence Divergence (MACD) and generate signals. This code uses `pandas` for data manipulation and `yfinance` to download historical stock price data from Yahoo Finance.

```python
import pandas as pd
import yfinance as yf

def calculate_ema(data, window):
    return data.ewm(span=window, adjust=False).mean()

def calculate_macd(data, short_window, long_window):
    short_ema = calculate_ema(data, short_window)
    long_ema = calculate_ema(data, long_window)
    macd = short_ema - long_ema
    signal = calculate_ema(macd, 9)
    return macd, signal

def generate_macd_signals(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    macd, signal = calculate_macd(data['Close'], 12, 26)
    data['MACD'] = macd
    data['Signal Line'] = signal
    data['MACD Signal'] = data['MACD'] > data['Signal Line']
    return data

# Example usage:
data = generate_macd_signals('AAPL', '2020-01-01', '2021-12-31')
print(data)
```

This code first defines a helper function `calculate_ema` to calculate the exponential moving average (EMA) of a data series. It then defines a function `calculate_macd` to calculate the MACD line and the signal line. The main function `generate_macd_signals` downloads historical price data for a given ticker symbol, calculates the MACD and signal lines, and adds a boolean column to the data frame that indicates whether the MACD line is above the signal line (which is often used as a buy signal).